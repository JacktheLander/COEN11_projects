Explain what happens when you run the threadHello.c program? Do you get the same result if you run it
multiple times? What do you think would happen if you were also running some other demanding processes
(e.g., compiling a big program, playing a Flash game on a website, or watching streaming video) when
you ran this program?

The program creates 20 threads and then outputs from one thread as it is returning the others. The issue is that when creating the threads the id is sometimes wrong. ie. 2, 3, 4, 8, 8, 5, 6, ...
The thread that outputs hello is also inconsistent and not always the parent. For a major program this is a significant issue because you need to ensure that the thread you are using is the one that you intend to process and also need to have the IDs correspond so that you can keep track.

The function go() has the parameter arg passed as a local variable. Are these variables per-thread or
shared state? Where does the compiler store these variablesâ€™ states? Note that each thread has its own
stack.

The argument is the address of a static variable that is shared across all threads in the process so when one thread changes it, it changes for all threads. This is why the output here is not desirable, because the output value is not stored in the threads memory. Instead, the static variable is stored in the process' memory.

The main() function has a local variable i. Is this variable per-thread or shared state? Where does the compiler store this variable?

i is this shared static variable that as we said before is local to main, not to the individual threads so it is stored in the process' memory and its address is passed to the threads memory.
